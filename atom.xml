<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SimpleBoy.苏苏</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-09-18T01:45:32.894Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>袁宇平</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>newArticle</title>
    <link href="http://example.com/2021/09/18/newArticle/"/>
    <id>http://example.com/2021/09/18/newArticle/</id>
    <published>2021-09-18T01:45:32.000Z</published>
    <updated>2021-09-18T01:45:32.894Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>static关键字</title>
    <link href="http://example.com/2021/09/04/hello-world/"/>
    <id>http://example.com/2021/09/04/hello-world/</id>
    <published>2021-09-03T16:00:00.000Z</published>
    <updated>2021-09-18T01:48:35.553Z</updated>
    
    <content type="html"><![CDATA[<h3 id="类变量"><a href="#类变量" class="headerlink" title="类变量"></a>类变量</h3><p>如果一个成员变量使用了static关键字，那么这个变量不在属于自己，而是属于所在的类。所以当成员变量被static关键字修饰之后，你创建对象去访问成员变量就会是下面的结果</p><img src="/.com//2019_9_17_1.png"><p><img src="/.com//2021_9_17_2.png" alt="图片"></p><p>ps：当Java执行程序时，类的字节码文件会加载到内存，类中的类变量在该类加载到内存时，就分配了相应的内存空间，再次创建对象时，类变量不在重新分配内存，所有的对象共享类变量，即所有对象的类变量是相同一处的内存空间。类变量的内存空间直到程序退出运行，才释放所占有的内存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">private</span>  String username;</span><br><span class="line">    <span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">static</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Demo4</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Demo4</span><span class="params">(<span class="keyword">int</span> age, String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Demo4&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Demo4.address = <span class="string">&quot;江西省&quot;</span>;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Demo4(<span class="number">1</span>,<span class="string">&quot;小明&quot;</span>) + Demo4.address);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Demo4(<span class="number">2</span>,<span class="string">&quot;小王&quot;</span>) + Demo4.address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Demo4&#123;age=<span class="number">1</span>, username=<span class="string">&#x27;小明&#x27;</span>&#125;江西省</span><br><span class="line">Demo4&#123;age=<span class="number">2</span>, username=<span class="string">&#x27;小王&#x27;</span>&#125;江西省</span><br></pre></td></tr></table></figure><h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3><p>类体中的方法分为实例方法和类方法两种，用static修饰的是类方法，否则位实例方法。无论是类方法还是实例方法，对象在创建之后，都可以使用”.”运算符调用这些方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是实例方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是类方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Demo4 a = <span class="keyword">new</span> Demo4();</span><br><span class="line">a.method();</span><br><span class="line">Demo4 b = <span class="keyword">new</span> Demo4();</span><br><span class="line">b.method2();</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line">我是实例方法</span><br><span class="line">我是类方法</span><br></pre></td></tr></table></figure><p>ps：对于静态方法来说，可以通过对象名进行调用，也可以直接通过类名称来调用。（但是不推荐通过对象名调用类方法），有static关键字，最好是用类名调用。没有static关键字，那就用对象调用</p><p>说到这里应该有人会问那类方法和实例方法到底有什么区别呢？</p><p>ps：当类的字节码文件被加载到内存时，类的实例方法不会被分配入口地址，在该类创建对象后，类中的实例方法才分配入口地址，从而实例方法可以被类创建的任何对象调用执行。需要注意的是，当创建第一个对象时，类中的实例方法就分配了入口地址，当在创建对象时，不在分配入口地址。也就是说方法的入口地址被所有的对象共享，当所有的对象不存在时，方法的地址才会被取消</p><p>ps：对于类方法，在类的字节码文件被加载到内存时，类方法就已经被分配了入口地址，类方法不仅可以被创建对象调用（不推荐），也可以通过类名调用（推荐）类方法的入口地址知道程序退出后才会被取消</p>]]></content>
    
    
    <summary type="html">笔记</summary>
    
    
    
    
  </entry>
  
</feed>
